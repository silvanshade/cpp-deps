[package]
name = "p1689"
version = "0.0.0"
authors = ["silvanshade <silvanshade@users.noreply.github.com>"]
license.workspace = true
edition.workspace = true
repository = "https://github.com/silvanshade/cpp-deps"
description = "Data structures for representing p1689 C++ modules dependency files"
readme = "README.md"
categories = ["compilers", "configuration", "development-tools"]
keywords = ["C++", "p1689", "modules", "build", "dependencies"]

[[bench]]
name = "bench"
harness = false
required-features = ["benchmark"]

[features]
default = ["memchr", "std"]
# Everything intended for normal usage.
full = ["default", "arbitrary", "builders", "deserialize", "extra_traits", "monostate", "parsing", "serde", "serialize"]
# Arbitrary impls for p1689r5 data structures.
arbitrary = ["dep:arbitrary", "arbitrary/derive"]
# Feature collection only intended for internal benchmarks.
benchmark = ["datagen", "deserialize", "parsing", "std"]
# Builders for constructing p1689r5 data structures.
builders = []
# UTF-8 paths instead of plain strings.
camino = ["dep:camino"]
# Enable tests against external corpus.
corpus = ["std"]
# Generation of p1689r5 data structures. Only intended for internal usage.
datagen = ["dep:fake", "dep:petgraph", "dep:rand", "dep:serde_json", "arbitrary", "serde", "serialize"]
# Deserialization support via serde.
deserialize = ["serde?/derive"]
# Extra traits for p1689r5 dat structures. Includes (Debug, Eq, Hash, Ord, etc).
extra_traits = []
# Use "memchr" for faster string processing with "parsing" feature.
memchr = ["dep:memchr"]
# Monostate for constant field values. Intended for usage with serde feature.
monostate = ["dep:monostate"]
# Fast, minimal-dependency parser. Builds and runs much faster than serde_json deserializer.
parsing = []
# Serde support for p1689r5 data structures. Additionally, enable "deserialize" or "serialize" to derive the impls.
serde = ["dep:cfg_eval", "dep:serde", "dep:serde_with", "camino?/serde1", "extra_traits", "monostate"]
# Serialization support via serde.
serialize = ["serde?/derive"]
# Enable use of `std` library. Not required; enables `Error` impl and some additional tests.
std = []

[dependencies]
arbitrary = { version = "1.3", optional = true, default-features = false }
camino = { version = "1.1", optional = true, default-features = false }
cfg_eval = { version = "0.1", optional = true, default-features = false }
fake = { version = "2.9", optional = true, default-features = false }
memchr = { version = "2.7", optional = true, default-features = false }
monostate = { version = "0.1", optional = true, default-features = false }
petgraph = { version = "0.6", optional = true, default-features = false, features = ["graphmap"] }
rand = { version = "0.8", optional = true, default-features = false}
serde = { version = "1.0", optional = true, default-features = false }
serde_json = { version = "1.0", optional = true, default-features = false, features = ["alloc", "std"] }
serde_with = { version = "3.8", optional = true, default-features = false, features = ["alloc", "macros"] }

[dev-dependencies]
arbitrary = { version = "1.3" }
criterion = { version = "0.5", features = ["html_reports"] }
monostate = { version = "0.1", default-features = false }
proptest = { version = "1.4", default-features = false, features = ["std"] }
rand = { version = "0.8", default-features = false}
rand_chacha = { version = "0.3", features = ["simd"] }
regex = { version = "1.10" }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
