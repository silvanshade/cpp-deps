(function() {var type_impls = {
"p1689":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: CloneableCart,\n    YokeTraitHack&lt;&lt;Y as Yokeable&lt;'a&gt;&gt;::Output&gt;: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"docblock\"><p>Clone requires that the cart type <code>C</code> derefs to the same address after it is cloned. This works for\nRc, Arc, and &amp;’a T.</p>\n<p>For other cart types, clone <code>.backing_cart()</code> and re-use <code>.attach_to_cart()</code>; however, doing\nso may lose mutations performed via <code>.with_mut()</code>.</p>\n<p>Cloning a <code>Yoke</code> is often a cheap operation requiring no heap allocations, in much the same\nway that cloning an <code>Rc</code> is a cheap operation. However, if the <code>yokeable</code> contains owned data\n(e.g., from <code>.with_mut()</code>), that data will need to be cloned.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Yoke&lt;Y, C&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    &lt;Y as Yokeable&lt;'a&gt;&gt;::Output: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+Arc%3CC%3E%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+Arc%3CC%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;C&gt;&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.erase_arc_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">erase_arc_cart</a>(self) -&gt; Yoke&lt;Y, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn ErasedDestructor + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Allows type-erasing the cart in a <code>Yoke&lt;Y, Arc&lt;C&gt;&gt;</code>.</p>\n<p>The yoke only carries around a cart type <code>C</code> for its destructor,\nsince it needs to be able to guarantee that its internal references\nare valid for the lifetime of the Yoke. As such, the actual type of the\nCart is not very useful unless you wish to extract data out of it\nvia [<code>Yoke::backing_cart()</code>]. Erasing the cart allows for one to mix\n[<code>Yoke</code>]s obtained from different sources.</p>\n<p>In case the cart type <code>C</code> is not already an <code>Arc&lt;T&gt;</code>, you can use\n[<code>Yoke::wrap_cart_in_arc()</code>] to wrap it.</p>\n<p>✨ <em>Enabled with the <code>alloc</code> Cargo feature.</em></p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>yoke::erased::ErasedArcCart;\n<span class=\"kw\">use </span>yoke::Yoke;\n\n<span class=\"kw\">let </span>buffer1: Arc&lt;String&gt; = Arc::new(<span class=\"string\">\"   foo bar baz  \"</span>.into());\n<span class=\"kw\">let </span>buffer2: Box&lt;String&gt; = Box::new(<span class=\"string\">\"  baz quux  \"</span>.into());\n\n<span class=\"kw\">let </span>yoke1 =\n    Yoke::&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, <span class=\"kw\">_</span>&gt;::attach_to_cart(buffer1, |arc| arc.trim());\n<span class=\"kw\">let </span>yoke2 = Yoke::&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, <span class=\"kw\">_</span>&gt;::attach_to_cart(buffer2, |b| b.trim());\n\n<span class=\"kw\">let </span>erased1: Yoke&lt;<span class=\"kw\">_</span>, ErasedArcCart&gt; = yoke1.erase_arc_cart();\n<span class=\"comment\">// Wrap the Box in an Rc to make it compatible\n</span><span class=\"kw\">let </span>erased2: Yoke&lt;<span class=\"kw\">_</span>, ErasedArcCart&gt; =\n    yoke2.wrap_cart_in_arc().erase_arc_cart();\n\n<span class=\"comment\">// Now erased1 and erased2 have the same type!</span></code></pre></div>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a &lt;Y as Yokeable&lt;'a&gt;&gt;::Output</h4></section></summary><div class=\"docblock\"><p>Obtain a valid reference to the yokeable data</p>\n<p>This essentially transforms the lifetime of the internal yokeable data to\nbe valid.\nFor example, if you’re working with a <code>Yoke&lt;Cow&lt;'static, T&gt;, C&gt;</code>, this\nwill return an <code>&amp;'a Cow&lt;'a, T&gt;</code></p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"comment\">// load_object() defined in the example at the top of this page\n</span><span class=\"kw\">let </span>yoke: Yoke&lt;Cow&lt;str&gt;, <span class=\"kw\">_</span>&gt; = load_object(<span class=\"string\">\"filename.bincode\"</span>);\n<span class=\"macro\">assert_eq!</span>(yoke.get(), <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backing_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">backing_cart</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;C</a></h4></section></summary><div class=\"docblock\"><p>Get a reference to the backing cart.</p>\n<p>This can be useful when building caches, etc. However, if you plan to store the cart\nseparately from the yoke, read the note of caution below in [<code>Yoke::into_backing_cart</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_backing_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_backing_cart</a>(self) -&gt; C</h4></section></summary><div class=\"docblock\"><p>Get the backing cart by value, dropping the yokeable object.</p>\n<p><strong>Caution:</strong> Calling this method could cause information saved in the yokeable object but\nnot the cart to be lost. Use this method only if the yokeable object cannot contain its\nown information.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<p>Good example: the yokeable object is only a reference, so no information can be lost.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>yoke::Yoke;\n\n<span class=\"kw\">let </span>local_data = <span class=\"string\">\"foo\"</span>.to_owned();\n<span class=\"kw\">let </span>yoke = Yoke::&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, Box&lt;String&gt;&gt;::attach_to_zero_copy_cart(\n    Box::new(local_data),\n);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>yoke.get(), <span class=\"string\">\"foo\"</span>);\n\n<span class=\"comment\">// Get back the cart\n</span><span class=\"kw\">let </span>cart = yoke.into_backing_cart();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>cart, <span class=\"string\">\"foo\"</span>);</code></pre></div>\n<p>Bad example: information specified in <code>.with_mut()</code> is lost.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n<span class=\"kw\">use </span>yoke::Yoke;\n\n<span class=\"kw\">let </span>local_data = <span class=\"string\">\"foo\"</span>.to_owned();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yoke =\n    Yoke::&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, Box&lt;String&gt;&gt;::attach_to_zero_copy_cart(\n        Box::new(local_data),\n    );\n<span class=\"macro\">assert_eq!</span>(yoke.get(), <span class=\"string\">\"foo\"</span>);\n\n<span class=\"comment\">// Override data in the cart\n</span>yoke.with_mut(|cow| {\n    <span class=\"kw\">let </span>mut_str = cow.to_mut();\n    mut_str.clear();\n    mut_str.push_str(<span class=\"string\">\"bar\"</span>);\n});\n<span class=\"macro\">assert_eq!</span>(yoke.get(), <span class=\"string\">\"bar\"</span>);\n\n<span class=\"comment\">// Get back the cart\n</span><span class=\"kw\">let </span>cart = yoke.into_backing_cart();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>cart, <span class=\"string\">\"foo\"</span>); <span class=\"comment\">// WHOOPS!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_cart\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">replace_cart</a>&lt;C2&gt;(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(C) -&gt; C2) -&gt; Yoke&lt;Y, C2&gt;</h4></section></summary><div class=\"docblock\"><p>Unsafe function for replacing the cart with another</p>\n<p>This can be used for type-erasing the cart, for example.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li>\n<p><code>f()</code> must not panic</p>\n</li>\n<li>\n<p>References from the yokeable <code>Y</code> should still be valid for the lifetime of the\nreturned cart type <code>C</code>.</p>\n<p>For the purpose of determining this, <code>Yoke</code> guarantees that references from the Yokeable\n<code>Y</code> into the cart <code>C</code> will never be references into its stack data, only heap data protected\nby <code>StableDeref</code>. This does not necessarily mean that <code>C</code> implements <code>StableDeref</code>, rather that\nany data referenced by <code>Y</code> must be accessed through a <code>StableDeref</code> impl on something <code>C</code> owns.</p>\n<p>Concretely, this means that if <code>C = Option&lt;Rc&lt;T&gt;&gt;</code>, <code>Y</code> may contain references to the <code>T</code> but not\nanything else.</p>\n</li>\n<li>\n<p>Lifetimes inside C must not be lengthened, even if they are themselves contravariant.\nI.e., if C contains an <code>fn(&amp;'a u8)</code>, it cannot be replaced with `fn(&amp;’static u8),\neven though that is typically safe.</p>\n</li>\n</ul>\n<p>Typically, this means implementing <code>f</code> as something which <em>wraps</em> the inner cart type <code>C</code>.\n<code>Yoke</code> only really cares about destructors for its carts so it’s fine to erase other\ninformation about the cart, as long as the backing data will still be destroyed at the\nsame time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_mut</a>&lt;'a, F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;Y as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class=\"docblock\"><p>Mutate the stored [<code>Yokeable</code>] data.</p>\n<p>See [<code>Yokeable::transform_mut()</code>] for why this operation is safe.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<p>This can be used to partially mutate the stored data, provided\nno <em>new</em> borrowed data is introduced.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"comment\">// also implements Yokeable\n</span><span class=\"kw\">struct </span>Bar&lt;<span class=\"lifetime\">'a</span>&gt; {\n    numbers: Cow&lt;<span class=\"lifetime\">'a</span>, [u8]&gt;,\n    string: Cow&lt;<span class=\"lifetime\">'a</span>, str&gt;,\n    owned: Vec&lt;u8&gt;,\n}\n\n<span class=\"comment\">// `load_object()` deserializes an object from a file\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bar: Yoke&lt;Bar, <span class=\"kw\">_</span>&gt; = load_object(<span class=\"string\">\"filename.bincode\"</span>);\n<span class=\"macro\">assert_eq!</span>(bar.get().string, <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(bar.get().string, Cow::Borrowed(<span class=\"kw\">_</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>bar.get().numbers, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x68</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x6f</span>]);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(bar.get().numbers, Cow::Borrowed(<span class=\"kw\">_</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>bar.get().owned, <span class=\"kw-2\">&amp;</span>[]);\n\nbar.with_mut(|bar| {\n    bar.string.to_mut().push_str(<span class=\"string\">\" world\"</span>);\n    bar.owned.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>]);\n});\n\n<span class=\"macro\">assert_eq!</span>(bar.get().string, <span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(bar.get().string, Cow::Owned(<span class=\"kw\">_</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>bar.get().owned, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>]);\n<span class=\"comment\">// Unchanged and still Cow::Borrowed\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>bar.get().numbers, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x68</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x6c</span>, <span class=\"number\">0x6f</span>]);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(bar.get().numbers, Cow::Borrowed(<span class=\"kw\">_</span>)));\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_option\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_option</a>(self) -&gt; Yoke&lt;Y, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in an <code>Option&lt;T&gt;</code>.</p>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_project\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_project</a>&lt;P, F&gt;(self, f: F) -&gt; Yoke&lt;P, C&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    F: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&lt;Y as Yokeable&lt;'a&gt;&gt;::Output, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; &lt;P as Yokeable&lt;'a&gt;&gt;::Output,</div></h4></section></summary><div class=\"docblock\"><p>Allows one to “project” a yoke to perform a transformation on the data, potentially\nlooking at a subfield, and producing a new yoke. This will move cart, and the provided\ntransformation is only allowed to use data known to be borrowed from the cart.</p>\n<p>The callback takes an additional <code>PhantomData&lt;&amp;()&gt;</code> parameter to anchor lifetimes\n(see <a href=\"https://github.com/rust-lang/rust/issues/86702\">#86702</a>) This parameter\nshould just be ignored in the callback.</p>\n<p>This can be used, for example, to transform data from one format to another:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>slice(y: Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, Rc&lt;[u8]&gt;&gt;) -&gt; Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>[u8], Rc&lt;[u8]&gt;&gt; {\n    y.map_project(<span class=\"kw\">move </span>|yk, <span class=\"kw\">_</span>| yk.as_bytes())\n}</code></pre></div>\n<p>This can also be used to create a yoke for a subfield</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// also safely implements Yokeable&lt;'a&gt;\n</span><span class=\"kw\">struct </span>Bar&lt;<span class=\"lifetime\">'a</span>&gt; {\n    string_1: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n    string_2: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n}\n\n<span class=\"kw\">fn </span>map_project_string_1(\n    bar: Yoke&lt;Bar&lt;<span class=\"lifetime\">'static</span>&gt;, Rc&lt;[u8]&gt;&gt;,\n) -&gt; Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, Rc&lt;[u8]&gt;&gt; {\n    bar.map_project(|bar, <span class=\"kw\">_</span>| bar.string_1)\n}\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_project_cloned\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_project_cloned</a>&lt;'this, P, F&gt;(&amp;'this self, f: F) -&gt; Yoke&lt;P, C&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: CloneableCart,\n    F: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'this &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; &lt;P as Yokeable&lt;'a&gt;&gt;::Output,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::map_project</code>], however it does not move\n[<code>Self</code>] and instead clones the cart (only if the cart is a [<code>CloneableCart</code>])</p>\n<p>This is a bit more efficient than cloning the [<code>Yoke</code>] and then calling [<code>Yoke::map_project</code>]\nbecause then it will not clone fields that are going to be discarded.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map_project\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_project</a>&lt;P, F, E&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;P, C&gt;, E&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    F: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&lt;Y as Yokeable&lt;'a&gt;&gt;::Output, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;P as Yokeable&lt;'a&gt;&gt;::Output, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::map_project</code>], however it can also bubble up an error\nfrom the callback.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>slice(\n    y: Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>[u8], Rc&lt;[u8]&gt;&gt;,\n) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, Rc&lt;[u8]&gt;&gt;, Utf8Error&gt; {\n    y.try_map_project(<span class=\"kw\">move </span>|bytes, <span class=\"kw\">_</span>| str::from_utf8(bytes))\n}</code></pre></div>\n<p>This can also be used to create a yoke for a subfield</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// also safely implements Yokeable&lt;'a&gt;\n</span><span class=\"kw\">struct </span>Bar&lt;<span class=\"lifetime\">'a</span>&gt; {\n    bytes_1: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[u8],\n    string_2: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n}\n\n<span class=\"kw\">fn </span>map_project_string_1(\n    bar: Yoke&lt;Bar&lt;<span class=\"lifetime\">'static</span>&gt;, Rc&lt;[u8]&gt;&gt;,\n) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Yoke&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, Rc&lt;[u8]&gt;&gt;, Utf8Error&gt; {\n    bar.try_map_project(|bar, <span class=\"kw\">_</span>| str::from_utf8(bar.bytes_1))\n}\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map_project_cloned\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_project_cloned</a>&lt;'this, P, F, E&gt;(\n    &amp;'this self,\n    f: F\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;P, C&gt;, E&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: CloneableCart,\n    F: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'this &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;P as Yokeable&lt;'a&gt;&gt;::Output, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::try_map_project</code>], however it does not move\n[<code>Self</code>] and instead clones the cart (only if the cart is a [<code>CloneableCart</code>])</p>\n<p>This is a bit more efficient than cloning the [<code>Yoke</code>] and then calling [<code>Yoke::map_project</code>]\nbecause then it will not clone fields that are going to be discarded.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_project_with_explicit_capture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_project_with_explicit_capture</a>&lt;P, T&gt;(\n    self,\n    capture: T,\n    f: for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, _: T, _: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; &lt;P as Yokeable&lt;'a&gt;&gt;::Output\n) -&gt; Yoke&lt;P, C&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::map_project</code>], but it works around older versions\nof Rust not being able to use <code>FnOnce</code> by using an explicit capture input.\nSee <a href=\"https://github.com/unicode-org/icu4x/issues/1061\">#1061</a>.</p>\n<p>See the docs of [<code>Yoke::map_project</code>] for how this works.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_project_cloned_with_explicit_capture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_project_cloned_with_explicit_capture</a>&lt;'this, P, T&gt;(\n    &amp;'this self,\n    capture: T,\n    f: for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &amp;'this &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, _: T, _: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; &lt;P as Yokeable&lt;'a&gt;&gt;::Output\n) -&gt; Yoke&lt;P, C&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: CloneableCart,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::map_project_cloned</code>], but it works around older versions\nof Rust not being able to use <code>FnOnce</code> by using an explicit capture input.\nSee <a href=\"https://github.com/unicode-org/icu4x/issues/1061\">#1061</a>.</p>\n<p>See the docs of [<code>Yoke::map_project_cloned</code>] for how this works.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map_project_with_explicit_capture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_project_with_explicit_capture</a>&lt;P, T, E&gt;(\n    self,\n    capture: T,\n    f: for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, _: T, _: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;P as Yokeable&lt;'a&gt;&gt;::Output, E&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;P, C&gt;, E&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::try_map_project</code>], but it works around older versions\nof Rust not being able to use <code>FnOnce</code> by using an explicit capture input.\nSee <a href=\"https://github.com/unicode-org/icu4x/issues/1061\">#1061</a>.</p>\n<p>See the docs of [<code>Yoke::try_map_project</code>] for how this works.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map_project_cloned_with_explicit_capture\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_project_cloned_with_explicit_capture</a>&lt;'this, P, T, E&gt;(\n    &amp;'this self,\n    capture: T,\n    f: for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &amp;'this &lt;Y as Yokeable&lt;'a&gt;&gt;::Output, _: T, _: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\">PhantomData</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;P as Yokeable&lt;'a&gt;&gt;::Output, E&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;P, C&gt;, E&gt;<div class=\"where\">where\n    P: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: CloneableCart,</div></h4></section></summary><div class=\"docblock\"><p>This is similar to [<code>Yoke::try_map_project_cloned</code>], but it works around older versions\nof Rust not being able to use <code>FnOnce</code> by using an explicit capture input.\nSee <a href=\"https://github.com/unicode-org/icu4x/issues/1061\">#1061</a>.</p>\n<p>See the docs of [<code>Yoke::try_map_project_cloned</code>] for how this works.</p>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_box\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_box</a>(self) -&gt; Yoke&lt;Y, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in a <code>Box&lt;T&gt;</code>.\nCan be paired with [<code>Yoke::erase_box_cart()</code>]</p>\n<p>✨ <em>Enabled with the <code>alloc</code> Cargo feature.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_rc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_rc</a>(self) -&gt; Yoke&lt;Y, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/rc/struct.Rc.html\" title=\"struct alloc::rc::Rc\">Rc</a>&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in an <code>Rc&lt;T&gt;</code>.\nCan be paired with [<code>Yoke::erase_rc_cart()</code>], or generally used\nto make the [<code>Yoke</code>] cloneable.</p>\n<p>✨ <em>Enabled with the <code>alloc</code> Cargo feature.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_arc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_arc</a>(self) -&gt; Yoke&lt;Y, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in an <code>Rc&lt;T&gt;</code>.\nCan be paired with [<code>Yoke::erase_arc_cart()</code>], or generally used\nto make the [<code>Yoke</code>] cloneable.</p>\n<p>✨ <em>Enabled with the <code>alloc</code> Cargo feature.</em></p>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_either_a\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_either_a</a>&lt;B&gt;(self) -&gt; Yoke&lt;Y, EitherCart&lt;C, B&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in an [<code>EitherCart</code>].</p>\n<p>This function wraps the cart into the <code>A</code> variant. To wrap it into the\n<code>B</code> variant, use [<code>Self::wrap_cart_in_either_b()</code>].</p>\n<p>For an example, see [<code>EitherCart</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_cart_in_either_b\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">wrap_cart_in_either_b</a>&lt;A&gt;(self) -&gt; Yoke&lt;Y, EitherCart&lt;A, C&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function allowing one to wrap the cart type <code>C</code> in an [<code>EitherCart</code>].</p>\n<p>This function wraps the cart into the <code>B</code> variant. To wrap it into the\n<code>A</code> variant, use [<code>Self::wrap_cart_in_either_a()</code>].</p>\n<p>For an example, see [<code>EitherCart</code>].</p>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    C: StableDeref,\n    &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.attach_to_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">attach_to_cart</a>&lt;F&gt;(cart: C, f: F) -&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    F: for&lt;'de&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'de &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>) -&gt; &lt;Y as Yokeable&lt;'de&gt;&gt;::Output,\n    &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Construct a [<code>Yoke</code>] by yokeing an object to a cart in a closure.</p>\n<p>The closure can read and write data outside of its scope, but data it returns\nmay borrow only from the argument passed to the closure.</p>\n<p>See also [<code>Yoke::try_attach_to_cart()</code>] to return a <code>Result</code> from the closure.</p>\n<p>Call sites for this function may not compile pre-1.61; if this still happens, use\n[<code>Yoke::attach_to_cart_badly()</code>] and file a bug.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">fn </span>load_object(filename: <span class=\"kw-2\">&amp;</span>str) -&gt; Yoke&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, Rc&lt;[u8]&gt;&gt; {\n    <span class=\"kw\">let </span>rc: Rc&lt;[u8]&gt; = load_from_cache(filename);\n    Yoke::&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, Rc&lt;[u8]&gt;&gt;::attach_to_cart(rc, |data: <span class=\"kw-2\">&amp;</span>[u8]| {\n        <span class=\"comment\">// essentially forcing a #[serde(borrow)]\n        </span>Cow::Borrowed(bincode::deserialize(data).unwrap())\n    })\n}\n\n<span class=\"kw\">let </span>yoke: Yoke&lt;Cow&lt;str&gt;, <span class=\"kw\">_</span>&gt; = load_object(<span class=\"string\">\"filename.bincode\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;**</span>yoke.get(), <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(yoke.get(), <span class=\"kw-2\">&amp;</span>Cow::Borrowed(<span class=\"kw\">_</span>)));</code></pre></div>\n<p>Write the number of consumed bytes to a local variable:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">fn </span>load_object(\n    filename: <span class=\"kw-2\">&amp;</span>str,\n) -&gt; (Yoke&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, Rc&lt;[u8]&gt;&gt;, usize) {\n    <span class=\"kw\">let </span>rc: Rc&lt;[u8]&gt; = load_from_cache(filename);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes_remaining = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>bytes_remaining = <span class=\"kw-2\">&amp;mut </span>bytes_remaining;\n    <span class=\"kw\">let </span>yoke = Yoke::&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, Rc&lt;[u8]&gt;&gt;::attach_to_cart(\n        rc,\n        |data: <span class=\"kw-2\">&amp;</span>[u8]| {\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = postcard::Deserializer::from_bytes(data);\n            <span class=\"kw\">let </span>output = serde::Deserialize::deserialize(<span class=\"kw-2\">&amp;mut </span>d);\n            <span class=\"kw-2\">*</span>bytes_remaining = d.finalize().unwrap().len();\n            Cow::Borrowed(output.unwrap())\n        },\n    );\n    (yoke, <span class=\"kw-2\">*</span>bytes_remaining)\n}\n\n<span class=\"kw\">let </span>(yoke, bytes_remaining) = load_object(<span class=\"string\">\"filename.postcard\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;**</span>yoke.get(), <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(yoke.get(), <span class=\"kw-2\">&amp;</span>Cow::Borrowed(<span class=\"kw\">_</span>)));\n<span class=\"macro\">assert_eq!</span>(bytes_remaining, <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_attach_to_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_attach_to_cart</a>&lt;E, F&gt;(cart: C, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;Y, C&gt;, E&gt;<div class=\"where\">where\n    F: for&lt;'de&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'de &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;Y as Yokeable&lt;'de&gt;&gt;::Output, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Construct a [<code>Yoke</code>] by yokeing an object to a cart. If an error occurs in the\ndeserializer function, the error is passed up to the caller.</p>\n<p>Call sites for this function may not compile pre-1.61; if this still happens, use\n[<code>Yoke::try_attach_to_cart_badly()</code>] and file a bug.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.attach_to_cart_badly\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">attach_to_cart_badly</a>(\n    cart: C,\n    f: for&lt;'de&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &amp;'de &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>) -&gt; &lt;Y as Yokeable&lt;'de&gt;&gt;::Output\n) -&gt; Yoke&lt;Y, C&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated</span></div></span></summary><div class=\"docblock\"><p>Use [<code>Yoke::attach_to_cart()</code>].</p>\n<p>This was needed because the pre-1.61 compiler couldn’t always handle the FnOnce trait bound.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_attach_to_cart_badly\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_attach_to_cart_badly</a>&lt;E&gt;(\n    cart: C,\n    f: for&lt;'de&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(_: &amp;'de &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;Y as Yokeable&lt;'de&gt;&gt;::Output, E&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Yoke&lt;Y, C&gt;, E&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated</span></div></span></summary><div class=\"docblock\"><p>Use [<code>Yoke::try_attach_to_cart()</code>].</p>\n<p>This was needed because the pre-1.61 compiler couldn’t always handle the FnOnce trait bound.</p>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yoke%3CY,+C%3E\" class=\"impl\"><a href=\"#impl-Yoke%3CY,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, C&gt; Yoke&lt;Y, C&gt;<div class=\"where\">where\n    Y: for&lt;'a&gt; Yokeable&lt;'a&gt;,\n    YokeTraitHack&lt;&lt;Y as Yokeable&lt;'a&gt;&gt;::Output&gt;: for&lt;'a&gt; ZeroFrom&lt;'a, &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;,\n    C: StableDeref + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,\n    &lt;C as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.attach_to_zero_copy_cart\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">attach_to_zero_copy_cart</a>(cart: C) -&gt; Yoke&lt;Y, C&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a [<code>Yoke</code>]<code>&lt;Y, C&gt;</code> from a cart implementing <code>StableDeref</code> by zero-copy cloning\nthe cart to <code>Y</code> and then yokeing that object to the cart.</p>\n<p>The type <code>Y</code> must implement [<code>ZeroFrom</code>]<code>&lt;C::Target&gt;</code>. This trait is auto-implemented\non many common types and can be custom implemented or derived in order to make it easier\nto construct a <code>Yoke</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Attach to a cart:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n<span class=\"kw\">use </span>yoke::Yoke;\n\n<span class=\"kw\">let </span>yoke = Yoke::&lt;Cow&lt;<span class=\"lifetime\">'static</span>, str&gt;, String&gt;::attach_to_zero_copy_cart(\n    <span class=\"string\">\"demo\"</span>.to_owned(),\n);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"demo\"</span>, yoke.get());</code></pre></div>\n</div></details></div></details>",0,"p1689::spec::r5::yoke::DepFileYoke","p1689::spec::r5::yoke::DepInfoYoke"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()